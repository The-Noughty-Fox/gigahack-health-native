//
// PersonChannelApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonChannelApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var communicationChannelTypeId: Int?
    public var allowDocumentDelivery: Bool?
    public var allowNotifications: Bool?
    public var allowPromotions: Bool?
    public var value: String?
    public var comment: String?

    public init(id: Int? = nil, communicationChannelTypeId: Int? = nil, allowDocumentDelivery: Bool? = nil, allowNotifications: Bool? = nil, allowPromotions: Bool? = nil, value: String? = nil, comment: String? = nil) {
        self.id = id
        self.communicationChannelTypeId = communicationChannelTypeId
        self.allowDocumentDelivery = allowDocumentDelivery
        self.allowNotifications = allowNotifications
        self.allowPromotions = allowPromotions
        self.value = value
        self.comment = comment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case communicationChannelTypeId
        case allowDocumentDelivery
        case allowNotifications
        case allowPromotions
        case value
        case comment
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(communicationChannelTypeId, forKey: .communicationChannelTypeId)
        try container.encodeIfPresent(allowDocumentDelivery, forKey: .allowDocumentDelivery)
        try container.encodeIfPresent(allowNotifications, forKey: .allowNotifications)
        try container.encodeIfPresent(allowPromotions, forKey: .allowPromotions)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(comment, forKey: .comment)
    }
}

