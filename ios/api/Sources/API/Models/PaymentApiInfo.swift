//
// PaymentApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PaymentApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var paymentType: PaymentType?
    public var number: String?
    public var accrualDateTime: Date?
    public var cashierDesk: DocumentApiInfoAuthor?
    public var isFiscalized: Bool?
    public var amount: Double?
    public var createdBy: DocumentApiInfoAuthor?
    public var registrationUnit: DocumentApiInfoAuthor?
    public var paymentTransactions: [PaymentTransactionApiInfo]?

    public init(id: Int? = nil, paymentType: PaymentType? = nil, number: String? = nil, accrualDateTime: Date? = nil, cashierDesk: DocumentApiInfoAuthor? = nil, isFiscalized: Bool? = nil, amount: Double? = nil, createdBy: DocumentApiInfoAuthor? = nil, registrationUnit: DocumentApiInfoAuthor? = nil, paymentTransactions: [PaymentTransactionApiInfo]? = nil) {
        self.id = id
        self.paymentType = paymentType
        self.number = number
        self.accrualDateTime = accrualDateTime
        self.cashierDesk = cashierDesk
        self.isFiscalized = isFiscalized
        self.amount = amount
        self.createdBy = createdBy
        self.registrationUnit = registrationUnit
        self.paymentTransactions = paymentTransactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case paymentType
        case number
        case accrualDateTime
        case cashierDesk
        case isFiscalized
        case amount
        case createdBy
        case registrationUnit
        case paymentTransactions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(paymentType, forKey: .paymentType)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(accrualDateTime, forKey: .accrualDateTime)
        try container.encodeIfPresent(cashierDesk, forKey: .cashierDesk)
        try container.encodeIfPresent(isFiscalized, forKey: .isFiscalized)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(registrationUnit, forKey: .registrationUnit)
        try container.encodeIfPresent(paymentTransactions, forKey: .paymentTransactions)
    }
}

