//
// PersonRelationTypeApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonRelationTypeApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    /** Name of relation from A side */
    public var partyAName: String?
    /** Name of relation from B side */
    public var partyBName: String?
    /** Gender of person at A side of relation. If not specified, relation is not gender specific. Not strictly enforced at API */
    public var partyAGender: String?
    /** Gender of person at B side of relation. If not specified, relation is not gender specific. Not strictly enforced at API */
    public var partyBGender: String?

    public init(id: Int? = nil, partyAName: String? = nil, partyBName: String? = nil, partyAGender: String? = nil, partyBGender: String? = nil) {
        self.id = id
        self.partyAName = partyAName
        self.partyBName = partyBName
        self.partyAGender = partyAGender
        self.partyBGender = partyBGender
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case partyAName
        case partyBName
        case partyAGender
        case partyBGender
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(partyAName, forKey: .partyAName)
        try container.encodeIfPresent(partyBName, forKey: .partyBName)
        try container.encodeIfPresent(partyAGender, forKey: .partyAGender)
        try container.encodeIfPresent(partyBGender, forKey: .partyBGender)
    }
}

