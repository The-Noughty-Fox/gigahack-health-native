//
// PersonSettlementInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonSettlementInfo: Codable, JSONEncodable, Hashable {

    public var settlementDateTime: Date?
    public var amount: Double?
    public var vat: Double?
    public var paymentType: String?
    public var cashierDeskName: String?
    public var invoiceId: Int?
    public var invoiceDate: Date?
    public var invoiceUnitId: Int?
    public var invoiceUnitName: String?
    public var payerName: String?
    public var payerLegalEntityName: String?
    public var payerLegalEntityIdentificationNumber: String?
    public var sellerLegalEntityName: String?
    public var sellerLegalEntityIdentificationNumber: String?

    public init(settlementDateTime: Date? = nil, amount: Double? = nil, vat: Double? = nil, paymentType: String? = nil, cashierDeskName: String? = nil, invoiceId: Int? = nil, invoiceDate: Date? = nil, invoiceUnitId: Int? = nil, invoiceUnitName: String? = nil, payerName: String? = nil, payerLegalEntityName: String? = nil, payerLegalEntityIdentificationNumber: String? = nil, sellerLegalEntityName: String? = nil, sellerLegalEntityIdentificationNumber: String? = nil) {
        self.settlementDateTime = settlementDateTime
        self.amount = amount
        self.vat = vat
        self.paymentType = paymentType
        self.cashierDeskName = cashierDeskName
        self.invoiceId = invoiceId
        self.invoiceDate = invoiceDate
        self.invoiceUnitId = invoiceUnitId
        self.invoiceUnitName = invoiceUnitName
        self.payerName = payerName
        self.payerLegalEntityName = payerLegalEntityName
        self.payerLegalEntityIdentificationNumber = payerLegalEntityIdentificationNumber
        self.sellerLegalEntityName = sellerLegalEntityName
        self.sellerLegalEntityIdentificationNumber = sellerLegalEntityIdentificationNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case settlementDateTime
        case amount
        case vat
        case paymentType
        case cashierDeskName
        case invoiceId
        case invoiceDate
        case invoiceUnitId
        case invoiceUnitName
        case payerName
        case payerLegalEntityName
        case payerLegalEntityIdentificationNumber
        case sellerLegalEntityName
        case sellerLegalEntityIdentificationNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(settlementDateTime, forKey: .settlementDateTime)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(vat, forKey: .vat)
        try container.encodeIfPresent(paymentType, forKey: .paymentType)
        try container.encodeIfPresent(cashierDeskName, forKey: .cashierDeskName)
        try container.encodeIfPresent(invoiceId, forKey: .invoiceId)
        try container.encodeIfPresent(invoiceDate, forKey: .invoiceDate)
        try container.encodeIfPresent(invoiceUnitId, forKey: .invoiceUnitId)
        try container.encodeIfPresent(invoiceUnitName, forKey: .invoiceUnitName)
        try container.encodeIfPresent(payerName, forKey: .payerName)
        try container.encodeIfPresent(payerLegalEntityName, forKey: .payerLegalEntityName)
        try container.encodeIfPresent(payerLegalEntityIdentificationNumber, forKey: .payerLegalEntityIdentificationNumber)
        try container.encodeIfPresent(sellerLegalEntityName, forKey: .sellerLegalEntityName)
        try container.encodeIfPresent(sellerLegalEntityIdentificationNumber, forKey: .sellerLegalEntityIdentificationNumber)
    }
}

