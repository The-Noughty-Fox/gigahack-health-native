//
// ExecutorApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExecutorApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var isExecutorEmployee: Bool?
    /** Employee Id (only for employee executors */
    public var employeeId: Int?
    /** List of units which the executor belongs to */
    public var unitIds: [Int]?
    /** Default timeslot / appointment duration if services are not specified */
    public var defaultAppointmentDuration: Int?
    public var isActive: Bool?

    public init(id: Int? = nil, name: String? = nil, isExecutorEmployee: Bool? = nil, employeeId: Int? = nil, unitIds: [Int]? = nil, defaultAppointmentDuration: Int? = nil, isActive: Bool? = nil) {
        self.id = id
        self.name = name
        self.isExecutorEmployee = isExecutorEmployee
        self.employeeId = employeeId
        self.unitIds = unitIds
        self.defaultAppointmentDuration = defaultAppointmentDuration
        self.isActive = isActive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case isExecutorEmployee
        case employeeId
        case unitIds
        case defaultAppointmentDuration
        case isActive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(isExecutorEmployee, forKey: .isExecutorEmployee)
        try container.encodeIfPresent(employeeId, forKey: .employeeId)
        try container.encodeIfPresent(unitIds, forKey: .unitIds)
        try container.encodeIfPresent(defaultAppointmentDuration, forKey: .defaultAppointmentDuration)
        try container.encodeIfPresent(isActive, forKey: .isActive)
    }
}

