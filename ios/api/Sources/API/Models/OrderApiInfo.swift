//
// OrderApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderApiInfo: Codable, JSONEncodable, Hashable {

    public var number: String?
    public var dateTime: Date?
    public var unitId: Int?
    public var webCode: String?
    public var personId: Int?
    public var isLocked: Bool?
    public var canBeDeleted: Bool?
    public var billableValue: Double?
    public var settledAmountPerson: Double?
    public var settledAmountCompany: Double?
    public var outstandingAmountPerson: Double?
    public var outstandingAmountCompany: Double?
    public var services: [ServiceApiInfo]?
    public var labRequestId: Int?
    public var payerId: Int?
    public var diagnosisForInvoice: String?

    public init(number: String? = nil, dateTime: Date? = nil, unitId: Int? = nil, webCode: String? = nil, personId: Int? = nil, isLocked: Bool? = nil, canBeDeleted: Bool? = nil, billableValue: Double? = nil, settledAmountPerson: Double? = nil, settledAmountCompany: Double? = nil, outstandingAmountPerson: Double? = nil, outstandingAmountCompany: Double? = nil, services: [ServiceApiInfo]? = nil, labRequestId: Int? = nil, payerId: Int? = nil, diagnosisForInvoice: String? = nil) {
        self.number = number
        self.dateTime = dateTime
        self.unitId = unitId
        self.webCode = webCode
        self.personId = personId
        self.isLocked = isLocked
        self.canBeDeleted = canBeDeleted
        self.billableValue = billableValue
        self.settledAmountPerson = settledAmountPerson
        self.settledAmountCompany = settledAmountCompany
        self.outstandingAmountPerson = outstandingAmountPerson
        self.outstandingAmountCompany = outstandingAmountCompany
        self.services = services
        self.labRequestId = labRequestId
        self.payerId = payerId
        self.diagnosisForInvoice = diagnosisForInvoice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case number
        case dateTime
        case unitId
        case webCode
        case personId
        case isLocked
        case canBeDeleted
        case billableValue
        case settledAmountPerson
        case settledAmountCompany
        case outstandingAmountPerson
        case outstandingAmountCompany
        case services
        case labRequestId
        case payerId
        case diagnosisForInvoice
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(dateTime, forKey: .dateTime)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(webCode, forKey: .webCode)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(isLocked, forKey: .isLocked)
        try container.encodeIfPresent(canBeDeleted, forKey: .canBeDeleted)
        try container.encodeIfPresent(billableValue, forKey: .billableValue)
        try container.encodeIfPresent(settledAmountPerson, forKey: .settledAmountPerson)
        try container.encodeIfPresent(settledAmountCompany, forKey: .settledAmountCompany)
        try container.encodeIfPresent(outstandingAmountPerson, forKey: .outstandingAmountPerson)
        try container.encodeIfPresent(outstandingAmountCompany, forKey: .outstandingAmountCompany)
        try container.encodeIfPresent(services, forKey: .services)
        try container.encodeIfPresent(labRequestId, forKey: .labRequestId)
        try container.encodeIfPresent(payerId, forKey: .payerId)
        try container.encodeIfPresent(diagnosisForInvoice, forKey: .diagnosisForInvoice)
    }
}

