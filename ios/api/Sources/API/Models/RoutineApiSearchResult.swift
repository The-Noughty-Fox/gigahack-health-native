//
// RoutineApiSearchResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RoutineApiSearchResult: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var code: String?
    public var name: String?
    public var shortName: String?
    public var type: String?
    public var isActive: Bool?
    public var isAvailableOnline: Bool?
    public var groupId: Int?
    public var groupName: String?
    public var topLevelGroupName: String?
    public var createdOn: Date?
    public var updatedOn: Date?

    public init(id: Int? = nil, code: String? = nil, name: String? = nil, shortName: String? = nil, type: String? = nil, isActive: Bool? = nil, isAvailableOnline: Bool? = nil, groupId: Int? = nil, groupName: String? = nil, topLevelGroupName: String? = nil, createdOn: Date? = nil, updatedOn: Date? = nil) {
        self.id = id
        self.code = code
        self.name = name
        self.shortName = shortName
        self.type = type
        self.isActive = isActive
        self.isAvailableOnline = isAvailableOnline
        self.groupId = groupId
        self.groupName = groupName
        self.topLevelGroupName = topLevelGroupName
        self.createdOn = createdOn
        self.updatedOn = updatedOn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case name
        case shortName
        case type
        case isActive
        case isAvailableOnline
        case groupId
        case groupName
        case topLevelGroupName
        case createdOn
        case updatedOn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(shortName, forKey: .shortName)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isAvailableOnline, forKey: .isAvailableOnline)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(topLevelGroupName, forKey: .topLevelGroupName)
        try container.encodeIfPresent(createdOn, forKey: .createdOn)
        try container.encodeIfPresent(updatedOn, forKey: .updatedOn)
    }
}

