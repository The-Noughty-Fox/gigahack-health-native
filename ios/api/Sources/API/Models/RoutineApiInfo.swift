//
// RoutineApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RoutineApiInfo: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var shortName: String?
    public var code: String?
    public var isActive: Bool?
    public var nameLanguage1: String?
    public var nameLanguage2: String?
    /** Marked as available online in DocDream */
    public var isAvailableOnline: Bool?
    public var type: RoutineApiInfoType?
    public var description: String?
    public var descriptionLanguage1: String?
    public var descriptionLanguage2: String?
    /** Routine group */
    public var routineGroupId: Int?
    public var preparationDescription: String?
    public var preparationDescriptionLanguage1: String?
    public var preparationDescriptionLanguage2: String?
    /** Print in price list in DocDream */
    public var printInPriceList: Bool?
    /** Cannot be added to order separately, only can be used within package service */
    public var disableAddingAsStandaloneService: Bool?
    /** Default speciality routine is associated with. Most useful for consultations. */
    public var defaultSpecialityId: Int?
    public var regularRoutineType: RoutineApiInfoRegularRoutineType?
    public var encounterLocationType: RoutineApiInfoEncounterLocationType?
    /** Duration of appointment if routine is the only one */
    public var durationSingle: Int?
    /** If appointment has several routines, it's duration is Max(Sum(DurationCombined),Max(DurationSingle)) */
    public var durationCombined: Int?
    /** Is profile (composite laboratory test) */
    public var isProfile: Bool?
    /** Substance for laboratory test. null for profiles - determine via components */
    public var substanceId: Int?
    /** Container for laboratory test. null for profiles - determine via components */
    public var containerId: Int?
    /** Turn around time (hours) - from sampling to result delivery, as promised to customer */
    public var turnAroundTimeHours: Int?
    /** Intake routine ids. For profiles, intakes for all component tests are returned. */
    public var intakeRoutineIds: [Int]?
    /** List of profile components */
    public var labProfileComponents: [Int]?
    /** List of package components */
    public var packageComponents: [ComponentApiInfo]?
    public var createdOn: Date?
    public var updatedOn: Date?

    public init(name: String? = nil, shortName: String? = nil, code: String? = nil, isActive: Bool? = nil, nameLanguage1: String? = nil, nameLanguage2: String? = nil, isAvailableOnline: Bool? = nil, type: RoutineApiInfoType? = nil, description: String? = nil, descriptionLanguage1: String? = nil, descriptionLanguage2: String? = nil, routineGroupId: Int? = nil, preparationDescription: String? = nil, preparationDescriptionLanguage1: String? = nil, preparationDescriptionLanguage2: String? = nil, printInPriceList: Bool? = nil, disableAddingAsStandaloneService: Bool? = nil, defaultSpecialityId: Int? = nil, regularRoutineType: RoutineApiInfoRegularRoutineType? = nil, encounterLocationType: RoutineApiInfoEncounterLocationType? = nil, durationSingle: Int? = nil, durationCombined: Int? = nil, isProfile: Bool? = nil, substanceId: Int? = nil, containerId: Int? = nil, turnAroundTimeHours: Int? = nil, intakeRoutineIds: [Int]? = nil, labProfileComponents: [Int]? = nil, packageComponents: [ComponentApiInfo]? = nil, createdOn: Date? = nil, updatedOn: Date? = nil) {
        self.name = name
        self.shortName = shortName
        self.code = code
        self.isActive = isActive
        self.nameLanguage1 = nameLanguage1
        self.nameLanguage2 = nameLanguage2
        self.isAvailableOnline = isAvailableOnline
        self.type = type
        self.description = description
        self.descriptionLanguage1 = descriptionLanguage1
        self.descriptionLanguage2 = descriptionLanguage2
        self.routineGroupId = routineGroupId
        self.preparationDescription = preparationDescription
        self.preparationDescriptionLanguage1 = preparationDescriptionLanguage1
        self.preparationDescriptionLanguage2 = preparationDescriptionLanguage2
        self.printInPriceList = printInPriceList
        self.disableAddingAsStandaloneService = disableAddingAsStandaloneService
        self.defaultSpecialityId = defaultSpecialityId
        self.regularRoutineType = regularRoutineType
        self.encounterLocationType = encounterLocationType
        self.durationSingle = durationSingle
        self.durationCombined = durationCombined
        self.isProfile = isProfile
        self.substanceId = substanceId
        self.containerId = containerId
        self.turnAroundTimeHours = turnAroundTimeHours
        self.intakeRoutineIds = intakeRoutineIds
        self.labProfileComponents = labProfileComponents
        self.packageComponents = packageComponents
        self.createdOn = createdOn
        self.updatedOn = updatedOn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case shortName
        case code
        case isActive
        case nameLanguage1
        case nameLanguage2
        case isAvailableOnline
        case type
        case description
        case descriptionLanguage1
        case descriptionLanguage2
        case routineGroupId
        case preparationDescription
        case preparationDescriptionLanguage1
        case preparationDescriptionLanguage2
        case printInPriceList
        case disableAddingAsStandaloneService
        case defaultSpecialityId
        case regularRoutineType
        case encounterLocationType
        case durationSingle
        case durationCombined
        case isProfile
        case substanceId
        case containerId
        case turnAroundTimeHours
        case intakeRoutineIds
        case labProfileComponents
        case packageComponents
        case createdOn
        case updatedOn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(shortName, forKey: .shortName)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(nameLanguage1, forKey: .nameLanguage1)
        try container.encodeIfPresent(nameLanguage2, forKey: .nameLanguage2)
        try container.encodeIfPresent(isAvailableOnline, forKey: .isAvailableOnline)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(descriptionLanguage1, forKey: .descriptionLanguage1)
        try container.encodeIfPresent(descriptionLanguage2, forKey: .descriptionLanguage2)
        try container.encodeIfPresent(routineGroupId, forKey: .routineGroupId)
        try container.encodeIfPresent(preparationDescription, forKey: .preparationDescription)
        try container.encodeIfPresent(preparationDescriptionLanguage1, forKey: .preparationDescriptionLanguage1)
        try container.encodeIfPresent(preparationDescriptionLanguage2, forKey: .preparationDescriptionLanguage2)
        try container.encodeIfPresent(printInPriceList, forKey: .printInPriceList)
        try container.encodeIfPresent(disableAddingAsStandaloneService, forKey: .disableAddingAsStandaloneService)
        try container.encodeIfPresent(defaultSpecialityId, forKey: .defaultSpecialityId)
        try container.encodeIfPresent(regularRoutineType, forKey: .regularRoutineType)
        try container.encodeIfPresent(encounterLocationType, forKey: .encounterLocationType)
        try container.encodeIfPresent(durationSingle, forKey: .durationSingle)
        try container.encodeIfPresent(durationCombined, forKey: .durationCombined)
        try container.encodeIfPresent(isProfile, forKey: .isProfile)
        try container.encodeIfPresent(substanceId, forKey: .substanceId)
        try container.encodeIfPresent(containerId, forKey: .containerId)
        try container.encodeIfPresent(turnAroundTimeHours, forKey: .turnAroundTimeHours)
        try container.encodeIfPresent(intakeRoutineIds, forKey: .intakeRoutineIds)
        try container.encodeIfPresent(labProfileComponents, forKey: .labProfileComponents)
        try container.encodeIfPresent(packageComponents, forKey: .packageComponents)
        try container.encodeIfPresent(createdOn, forKey: .createdOn)
        try container.encodeIfPresent(updatedOn, forKey: .updatedOn)
    }
}

