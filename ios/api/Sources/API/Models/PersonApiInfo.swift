//
// PersonApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var lastName: String?
    public var firstName: String?
    public var patronymicName: String?
    public var dateOfBirth: Date?
    public var gender: String?
    public var barcode: String?
    public var identificationNumber: String?
    public var defaultPayerPriceModelId: Int?
    public var createdOn: Date?
    public var updatedOn: Date?
    public var isEmployee: Bool?
    public var isPractitioner: Bool?

    public init(id: Int? = nil, lastName: String? = nil, firstName: String? = nil, patronymicName: String? = nil, dateOfBirth: Date? = nil, gender: String? = nil, barcode: String? = nil, identificationNumber: String? = nil, defaultPayerPriceModelId: Int? = nil, createdOn: Date? = nil, updatedOn: Date? = nil, isEmployee: Bool? = nil, isPractitioner: Bool? = nil) {
        self.id = id
        self.lastName = lastName
        self.firstName = firstName
        self.patronymicName = patronymicName
        self.dateOfBirth = dateOfBirth
        self.gender = gender
        self.barcode = barcode
        self.identificationNumber = identificationNumber
        self.defaultPayerPriceModelId = defaultPayerPriceModelId
        self.createdOn = createdOn
        self.updatedOn = updatedOn
        self.isEmployee = isEmployee
        self.isPractitioner = isPractitioner
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case lastName
        case firstName
        case patronymicName
        case dateOfBirth
        case gender
        case barcode
        case identificationNumber
        case defaultPayerPriceModelId
        case createdOn
        case updatedOn
        case isEmployee
        case isPractitioner
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(patronymicName, forKey: .patronymicName)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(identificationNumber, forKey: .identificationNumber)
        try container.encodeIfPresent(defaultPayerPriceModelId, forKey: .defaultPayerPriceModelId)
        try container.encodeIfPresent(createdOn, forKey: .createdOn)
        try container.encodeIfPresent(updatedOn, forKey: .updatedOn)
        try container.encodeIfPresent(isEmployee, forKey: .isEmployee)
        try container.encodeIfPresent(isPractitioner, forKey: .isPractitioner)
    }
}

