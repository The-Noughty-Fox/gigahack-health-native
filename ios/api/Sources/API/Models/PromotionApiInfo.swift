//
// PromotionApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PromotionApiInfo: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var autoActivation: Bool?
    public var startDate: Date?
    public var endDate: Date?
    /** Day of the week: 1-7, where 1 is Monday and 7 is Sunday */
    public var dayOfWeekRule: String?
    public var dayTimeFromRule: String?
    public var dayTimeToRule: String?
    public var genderRule: PromotionApiInfoGenderRule?
    public var minAgeRule: Int?
    public var maxAgeRule: Int?
    public var promotionPayerRules: [EntityApiInfo]?
    public var promotionUnitRules: [EntityApiInfo]?
    public var allowAnyRoutine: Bool?
    public var promotionRoutineRules: [PromotionRoutineApiInfo]?
    public var discount: Double?

    public init(name: String? = nil, autoActivation: Bool? = nil, startDate: Date? = nil, endDate: Date? = nil, dayOfWeekRule: String? = nil, dayTimeFromRule: String? = nil, dayTimeToRule: String? = nil, genderRule: PromotionApiInfoGenderRule? = nil, minAgeRule: Int? = nil, maxAgeRule: Int? = nil, promotionPayerRules: [EntityApiInfo]? = nil, promotionUnitRules: [EntityApiInfo]? = nil, allowAnyRoutine: Bool? = nil, promotionRoutineRules: [PromotionRoutineApiInfo]? = nil, discount: Double? = nil) {
        self.name = name
        self.autoActivation = autoActivation
        self.startDate = startDate
        self.endDate = endDate
        self.dayOfWeekRule = dayOfWeekRule
        self.dayTimeFromRule = dayTimeFromRule
        self.dayTimeToRule = dayTimeToRule
        self.genderRule = genderRule
        self.minAgeRule = minAgeRule
        self.maxAgeRule = maxAgeRule
        self.promotionPayerRules = promotionPayerRules
        self.promotionUnitRules = promotionUnitRules
        self.allowAnyRoutine = allowAnyRoutine
        self.promotionRoutineRules = promotionRoutineRules
        self.discount = discount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case autoActivation
        case startDate
        case endDate
        case dayOfWeekRule
        case dayTimeFromRule
        case dayTimeToRule
        case genderRule
        case minAgeRule
        case maxAgeRule
        case promotionPayerRules
        case promotionUnitRules
        case allowAnyRoutine
        case promotionRoutineRules
        case discount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(autoActivation, forKey: .autoActivation)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(dayOfWeekRule, forKey: .dayOfWeekRule)
        try container.encodeIfPresent(dayTimeFromRule, forKey: .dayTimeFromRule)
        try container.encodeIfPresent(dayTimeToRule, forKey: .dayTimeToRule)
        try container.encodeIfPresent(genderRule, forKey: .genderRule)
        try container.encodeIfPresent(minAgeRule, forKey: .minAgeRule)
        try container.encodeIfPresent(maxAgeRule, forKey: .maxAgeRule)
        try container.encodeIfPresent(promotionPayerRules, forKey: .promotionPayerRules)
        try container.encodeIfPresent(promotionUnitRules, forKey: .promotionUnitRules)
        try container.encodeIfPresent(allowAnyRoutine, forKey: .allowAnyRoutine)
        try container.encodeIfPresent(promotionRoutineRules, forKey: .promotionRoutineRules)
        try container.encodeIfPresent(discount, forKey: .discount)
    }
}

