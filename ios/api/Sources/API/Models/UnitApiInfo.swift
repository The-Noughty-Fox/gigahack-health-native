//
// UnitApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UnitApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var nameLanguage1: String?
    public var nameLanguage2: String?
    public var medicalCareType: UnitApiInfoMedicalCareType?
    public var address: String?
    public var briefAddress: String?
    public var licenseInfoForDocuments: String?
    public var contactDataForDocuments: String?
    public var workingDayStart: String?
    public var workingDayEnd: String?
    public var headEmployee: DocumentApiInfoAuthor?
    public var email: String?
    public var phoneNumber: String?
    public var localPhoneNumber: String?
    public var patientInformation: String?
    public var chiefPhysician: String?
    public var allowPlanning: Bool?

    public init(id: Int? = nil, name: String? = nil, nameLanguage1: String? = nil, nameLanguage2: String? = nil, medicalCareType: UnitApiInfoMedicalCareType? = nil, address: String? = nil, briefAddress: String? = nil, licenseInfoForDocuments: String? = nil, contactDataForDocuments: String? = nil, workingDayStart: String? = nil, workingDayEnd: String? = nil, headEmployee: DocumentApiInfoAuthor? = nil, email: String? = nil, phoneNumber: String? = nil, localPhoneNumber: String? = nil, patientInformation: String? = nil, chiefPhysician: String? = nil, allowPlanning: Bool? = nil) {
        self.id = id
        self.name = name
        self.nameLanguage1 = nameLanguage1
        self.nameLanguage2 = nameLanguage2
        self.medicalCareType = medicalCareType
        self.address = address
        self.briefAddress = briefAddress
        self.licenseInfoForDocuments = licenseInfoForDocuments
        self.contactDataForDocuments = contactDataForDocuments
        self.workingDayStart = workingDayStart
        self.workingDayEnd = workingDayEnd
        self.headEmployee = headEmployee
        self.email = email
        self.phoneNumber = phoneNumber
        self.localPhoneNumber = localPhoneNumber
        self.patientInformation = patientInformation
        self.chiefPhysician = chiefPhysician
        self.allowPlanning = allowPlanning
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case nameLanguage1
        case nameLanguage2
        case medicalCareType
        case address
        case briefAddress
        case licenseInfoForDocuments
        case contactDataForDocuments
        case workingDayStart
        case workingDayEnd
        case headEmployee
        case email
        case phoneNumber
        case localPhoneNumber
        case patientInformation
        case chiefPhysician
        case allowPlanning
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(nameLanguage1, forKey: .nameLanguage1)
        try container.encodeIfPresent(nameLanguage2, forKey: .nameLanguage2)
        try container.encodeIfPresent(medicalCareType, forKey: .medicalCareType)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(briefAddress, forKey: .briefAddress)
        try container.encodeIfPresent(licenseInfoForDocuments, forKey: .licenseInfoForDocuments)
        try container.encodeIfPresent(contactDataForDocuments, forKey: .contactDataForDocuments)
        try container.encodeIfPresent(workingDayStart, forKey: .workingDayStart)
        try container.encodeIfPresent(workingDayEnd, forKey: .workingDayEnd)
        try container.encodeIfPresent(headEmployee, forKey: .headEmployee)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(localPhoneNumber, forKey: .localPhoneNumber)
        try container.encodeIfPresent(patientInformation, forKey: .patientInformation)
        try container.encodeIfPresent(chiefPhysician, forKey: .chiefPhysician)
        try container.encodeIfPresent(allowPlanning, forKey: .allowPlanning)
    }
}

