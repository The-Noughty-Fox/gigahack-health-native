//
// PersonChannelApiPatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PersonChannelApiPatch: Codable, JSONEncodable, Hashable {

    public var typeId: PersonChannelApiPatchTypeId?
    public var value: PersonChannelApiPatchValue?
    public var comment: PersonChannelApiPatchValue?
    public var allowDocumentDelivery: PersonChannelApiPatchAllowDocumentDelivery?
    public var allowNotifications: PersonChannelApiPatchAllowDocumentDelivery?
    public var allowPromotions: PersonChannelApiPatchAllowDocumentDelivery?

    public init(typeId: PersonChannelApiPatchTypeId? = nil, value: PersonChannelApiPatchValue? = nil, comment: PersonChannelApiPatchValue? = nil, allowDocumentDelivery: PersonChannelApiPatchAllowDocumentDelivery? = nil, allowNotifications: PersonChannelApiPatchAllowDocumentDelivery? = nil, allowPromotions: PersonChannelApiPatchAllowDocumentDelivery? = nil) {
        self.typeId = typeId
        self.value = value
        self.comment = comment
        self.allowDocumentDelivery = allowDocumentDelivery
        self.allowNotifications = allowNotifications
        self.allowPromotions = allowPromotions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case typeId
        case value
        case comment
        case allowDocumentDelivery
        case allowNotifications
        case allowPromotions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(typeId, forKey: .typeId)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(allowDocumentDelivery, forKey: .allowDocumentDelivery)
        try container.encodeIfPresent(allowNotifications, forKey: .allowNotifications)
        try container.encodeIfPresent(allowPromotions, forKey: .allowPromotions)
    }
}

