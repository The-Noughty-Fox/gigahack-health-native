//
// CreatePaymentApiRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreatePaymentApiRequest: Codable, JSONEncodable, Hashable {

    public var invoiceId: Int?
    @available(*, deprecated, message: "This property is deprecated.")
    public var appointmentId: Int?
    public var appointmentIds: [Int]?
    @available(*, deprecated, message: "This property is deprecated.")
    public var orderId: Int?
    public var orderIds: [Int]?
    public var amount: Double
    public var transactionDateTime: Date?
    public var id: String?
    public var comment: String?

    public init(invoiceId: Int? = nil, appointmentId: Int? = nil, appointmentIds: [Int]? = nil, orderId: Int? = nil, orderIds: [Int]? = nil, amount: Double, transactionDateTime: Date? = nil, id: String? = nil, comment: String? = nil) {
        self.invoiceId = invoiceId
        self.appointmentId = appointmentId
        self.appointmentIds = appointmentIds
        self.orderId = orderId
        self.orderIds = orderIds
        self.amount = amount
        self.transactionDateTime = transactionDateTime
        self.id = id
        self.comment = comment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case invoiceId
        case appointmentId
        case appointmentIds
        case orderId
        case orderIds
        case amount
        case transactionDateTime
        case id
        case comment
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(invoiceId, forKey: .invoiceId)
        try container.encodeIfPresent(appointmentId, forKey: .appointmentId)
        try container.encodeIfPresent(appointmentIds, forKey: .appointmentIds)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(orderIds, forKey: .orderIds)
        try container.encode(amount, forKey: .amount)
        try container.encodeIfPresent(transactionDateTime, forKey: .transactionDateTime)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(comment, forKey: .comment)
    }
}

