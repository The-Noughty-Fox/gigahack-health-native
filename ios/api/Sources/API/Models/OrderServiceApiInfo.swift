//
// OrderServiceApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderServiceApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var payerId: Int?
    public var routineId: Int?
    public var referrerId: Int?
    public var isBillable: Bool?
    public var unitPrice: Double?
    public var quantity: Double?
    public var discount: Double?
    public var deductible: Double?
    public var value: Double?
    public var vatRate: Double?
    public var settledAmoutPerson: Double?
    public var settledAmoutCompany: Double?

    public init(id: Int? = nil, payerId: Int? = nil, routineId: Int? = nil, referrerId: Int? = nil, isBillable: Bool? = nil, unitPrice: Double? = nil, quantity: Double? = nil, discount: Double? = nil, deductible: Double? = nil, value: Double? = nil, vatRate: Double? = nil, settledAmoutPerson: Double? = nil, settledAmoutCompany: Double? = nil) {
        self.id = id
        self.payerId = payerId
        self.routineId = routineId
        self.referrerId = referrerId
        self.isBillable = isBillable
        self.unitPrice = unitPrice
        self.quantity = quantity
        self.discount = discount
        self.deductible = deductible
        self.value = value
        self.vatRate = vatRate
        self.settledAmoutPerson = settledAmoutPerson
        self.settledAmoutCompany = settledAmoutCompany
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case payerId
        case routineId
        case referrerId
        case isBillable
        case unitPrice
        case quantity
        case discount
        case deductible
        case value
        case vatRate
        case settledAmoutPerson
        case settledAmoutCompany
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(payerId, forKey: .payerId)
        try container.encodeIfPresent(routineId, forKey: .routineId)
        try container.encodeIfPresent(referrerId, forKey: .referrerId)
        try container.encodeIfPresent(isBillable, forKey: .isBillable)
        try container.encodeIfPresent(unitPrice, forKey: .unitPrice)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(discount, forKey: .discount)
        try container.encodeIfPresent(deductible, forKey: .deductible)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(vatRate, forKey: .vatRate)
        try container.encodeIfPresent(settledAmoutPerson, forKey: .settledAmoutPerson)
        try container.encodeIfPresent(settledAmoutCompany, forKey: .settledAmoutCompany)
    }
}

