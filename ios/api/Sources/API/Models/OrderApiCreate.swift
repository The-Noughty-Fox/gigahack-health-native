//
// OrderApiCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderApiCreate: Codable, JSONEncodable, Hashable {

    public var unitId: Int
    public var patientId: Int
    /** Date (or date and time) used for order. If not specified, current date/time is used. */
    public var dateTime: Date?
    /** Referrer (practitioner) which will be set for services in order. */
    public var referrerId: Int?
    public var services: [ServiceInOrderRequest]?
    public var comment: String?
    public var diagnosisForInvoice: String?

    public init(unitId: Int, patientId: Int, dateTime: Date? = nil, referrerId: Int? = nil, services: [ServiceInOrderRequest]? = nil, comment: String? = nil, diagnosisForInvoice: String? = nil) {
        self.unitId = unitId
        self.patientId = patientId
        self.dateTime = dateTime
        self.referrerId = referrerId
        self.services = services
        self.comment = comment
        self.diagnosisForInvoice = diagnosisForInvoice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case unitId
        case patientId
        case dateTime
        case referrerId
        case services
        case comment
        case diagnosisForInvoice
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(unitId, forKey: .unitId)
        try container.encode(patientId, forKey: .patientId)
        try container.encodeIfPresent(dateTime, forKey: .dateTime)
        try container.encodeIfPresent(referrerId, forKey: .referrerId)
        try container.encodeIfPresent(services, forKey: .services)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(diagnosisForInvoice, forKey: .diagnosisForInvoice)
    }
}

