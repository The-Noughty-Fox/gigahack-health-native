//
// CommissionInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CommissionInfo: Codable, JSONEncodable, Hashable {

    public var patientName: String?
    public var routineName: String?
    public var serviceId: Int?
    public var accruedOn: Date?
    public var unitName: String?
    public var serviceValue: Double?
    public var value: Double?
    public var commissionareShortName: String?
    public var extraResourceRequirementTypeName: String?
    public var appointmentId: Int?
    public var orderId: Int?
    public var calculationFormula: String?

    public init(patientName: String? = nil, routineName: String? = nil, serviceId: Int? = nil, accruedOn: Date? = nil, unitName: String? = nil, serviceValue: Double? = nil, value: Double? = nil, commissionareShortName: String? = nil, extraResourceRequirementTypeName: String? = nil, appointmentId: Int? = nil, orderId: Int? = nil, calculationFormula: String? = nil) {
        self.patientName = patientName
        self.routineName = routineName
        self.serviceId = serviceId
        self.accruedOn = accruedOn
        self.unitName = unitName
        self.serviceValue = serviceValue
        self.value = value
        self.commissionareShortName = commissionareShortName
        self.extraResourceRequirementTypeName = extraResourceRequirementTypeName
        self.appointmentId = appointmentId
        self.orderId = orderId
        self.calculationFormula = calculationFormula
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case patientName
        case routineName
        case serviceId
        case accruedOn
        case unitName
        case serviceValue
        case value
        case commissionareShortName
        case extraResourceRequirementTypeName
        case appointmentId
        case orderId
        case calculationFormula
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(patientName, forKey: .patientName)
        try container.encodeIfPresent(routineName, forKey: .routineName)
        try container.encodeIfPresent(serviceId, forKey: .serviceId)
        try container.encodeIfPresent(accruedOn, forKey: .accruedOn)
        try container.encodeIfPresent(unitName, forKey: .unitName)
        try container.encodeIfPresent(serviceValue, forKey: .serviceValue)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(commissionareShortName, forKey: .commissionareShortName)
        try container.encodeIfPresent(extraResourceRequirementTypeName, forKey: .extraResourceRequirementTypeName)
        try container.encodeIfPresent(appointmentId, forKey: .appointmentId)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(calculationFormula, forKey: .calculationFormula)
    }
}

