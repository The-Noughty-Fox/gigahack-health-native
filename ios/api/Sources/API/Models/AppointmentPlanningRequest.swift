//
// AppointmentPlanningRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppointmentPlanningRequest: Codable, JSONEncodable, Hashable {

    /** Person to plan appointment for */
    public var personId: Int
    /** Id of main executor resource (employee or role). Use id of executor which is returned by api/planning */
    public var mainExecutorId: Int
    /** Id of Unit to plan appointment */
    public var unitId: Int
    /** Date and time of appointment start */
    public var start: Date
    /** Appointment duration in minutes */
    public var duration: Int
    public var state: AppointmentPlanningRequestState?
    /** Date and time of reserve expiration. Used only for Reserved state. If empty, 10 minutes is assumed */
    public var reserveExpiration: Date?
    /** Id of referring doctor (practitioner resource). */
    public var referrerId: Int?
    /** List of services to plan. May be null/empty, empty appointments are permitted. */
    public var services: [ServiceInAppointmentRequest]?

    public init(personId: Int, mainExecutorId: Int, unitId: Int, start: Date, duration: Int, state: AppointmentPlanningRequestState? = nil, reserveExpiration: Date? = nil, referrerId: Int? = nil, services: [ServiceInAppointmentRequest]? = nil) {
        self.personId = personId
        self.mainExecutorId = mainExecutorId
        self.unitId = unitId
        self.start = start
        self.duration = duration
        self.state = state
        self.reserveExpiration = reserveExpiration
        self.referrerId = referrerId
        self.services = services
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case personId
        case mainExecutorId
        case unitId
        case start
        case duration
        case state
        case reserveExpiration
        case referrerId
        case services
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(personId, forKey: .personId)
        try container.encode(mainExecutorId, forKey: .mainExecutorId)
        try container.encode(unitId, forKey: .unitId)
        try container.encode(start, forKey: .start)
        try container.encode(duration, forKey: .duration)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(reserveExpiration, forKey: .reserveExpiration)
        try container.encodeIfPresent(referrerId, forKey: .referrerId)
        try container.encodeIfPresent(services, forKey: .services)
    }
}

