//
// DocumentApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DocumentApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var type: String?
    public var typeName: String?
    public var name: String?
    public var appointmentId: Int?
    public var createdOn: Date?
    public var author: DocumentApiInfoAuthor?
    public var isAttachment: Bool?
    public var contentType: String?

    public init(id: Int? = nil, type: String? = nil, typeName: String? = nil, name: String? = nil, appointmentId: Int? = nil, createdOn: Date? = nil, author: DocumentApiInfoAuthor? = nil, isAttachment: Bool? = nil, contentType: String? = nil) {
        self.id = id
        self.type = type
        self.typeName = typeName
        self.name = name
        self.appointmentId = appointmentId
        self.createdOn = createdOn
        self.author = author
        self.isAttachment = isAttachment
        self.contentType = contentType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case typeName
        case name
        case appointmentId
        case createdOn
        case author
        case isAttachment
        case contentType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(typeName, forKey: .typeName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(appointmentId, forKey: .appointmentId)
        try container.encodeIfPresent(createdOn, forKey: .createdOn)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(isAttachment, forKey: .isAttachment)
        try container.encodeIfPresent(contentType, forKey: .contentType)
    }
}

