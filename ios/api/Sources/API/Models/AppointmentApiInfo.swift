//
// AppointmentApiInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AppointmentApiInfo: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var unitId: Int?
    public var mainExecutorEmployeeId: Int?
    public var referrerId: Int?
    public var venueId: Int?
    public var start: Date?
    public var duration: Int?

    public init(id: Int? = nil, unitId: Int? = nil, mainExecutorEmployeeId: Int? = nil, referrerId: Int? = nil, venueId: Int? = nil, start: Date? = nil, duration: Int? = nil) {
        self.id = id
        self.unitId = unitId
        self.mainExecutorEmployeeId = mainExecutorEmployeeId
        self.referrerId = referrerId
        self.venueId = venueId
        self.start = start
        self.duration = duration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case unitId
        case mainExecutorEmployeeId
        case referrerId
        case venueId
        case start
        case duration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(unitId, forKey: .unitId)
        try container.encodeIfPresent(mainExecutorEmployeeId, forKey: .mainExecutorEmployeeId)
        try container.encodeIfPresent(referrerId, forKey: .referrerId)
        try container.encodeIfPresent(venueId, forKey: .venueId)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(duration, forKey: .duration)
    }
}

