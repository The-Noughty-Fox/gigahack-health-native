//
// ResourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ResourcesAPI {

    /**
     Gets executor commissions for the period
     
     - parameter employeeId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: [CommissionInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func employeesGetCommissions(employeeId: Int, startDate: Date, endDate: Date) async throws -> [CommissionInfo] {
        return try await employeesGetCommissionsWithRequestBuilder(employeeId: employeeId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     Gets executor commissions for the period
     - GET /api/employees/{employeeId}/commissions
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter employeeId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<[CommissionInfo]> 
     */
    open class func employeesGetCommissionsWithRequestBuilder(employeeId: Int, startDate: Date, endDate: Date) -> RequestBuilder<[CommissionInfo]> {
        var localVariablePath = "/api/employees/{employeeId}/commissions"
        let employeeIdPreEscape = "\(APIHelper.mapValueToPathItem(employeeId))"
        let employeeIdPostEscape = employeeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{employeeId}", with: employeeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CommissionInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list of employees
     
     - parameter specialityId: (query) Optional speciality filter (optional)
     - parameter unitId: (query) Optional unit filter (optional)
     - parameter includeNonActive: (query) Include non active employees (optional, default to false)
     - returns: [EmployeeApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func employeesGetEmployees(specialityId: Int? = nil, unitId: Int? = nil, includeNonActive: Bool? = nil) async throws -> [EmployeeApiInfo] {
        return try await employeesGetEmployeesWithRequestBuilder(specialityId: specialityId, unitId: unitId, includeNonActive: includeNonActive).execute().body
    }

    /**
     Get list of employees
     - GET /api/employees
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter specialityId: (query) Optional speciality filter (optional)
     - parameter unitId: (query) Optional unit filter (optional)
     - parameter includeNonActive: (query) Include non active employees (optional, default to false)
     - returns: RequestBuilder<[EmployeeApiInfo]> 
     */
    open class func employeesGetEmployeesWithRequestBuilder(specialityId: Int? = nil, unitId: Int? = nil, includeNonActive: Bool? = nil) -> RequestBuilder<[EmployeeApiInfo]> {
        let localVariablePath = "/api/employees"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "specialityId": (wrappedValue: specialityId?.encodeToJSON(), isExplode: true),
            "unitId": (wrappedValue: unitId?.encodeToJSON(), isExplode: true),
            "includeNonActive": (wrappedValue: includeNonActive?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EmployeeApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list of routines executor is capable of
     
     - parameter executorId: (path) Id of executor (not same as employeeId!) 
     - returns: [AbilityApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func executorsGetAbilities(executorId: Int) async throws -> [AbilityApiInfo] {
        return try await executorsGetAbilitiesWithRequestBuilder(executorId: executorId).execute().body
    }

    /**
     Get list of routines executor is capable of
     - GET /api/executors/{executorId}/abilities
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter executorId: (path) Id of executor (not same as employeeId!) 
     - returns: RequestBuilder<[AbilityApiInfo]> 
     */
    open class func executorsGetAbilitiesWithRequestBuilder(executorId: Int) -> RequestBuilder<[AbilityApiInfo]> {
        var localVariablePath = "/api/executors/{executorId}/abilities"
        let executorIdPreEscape = "\(APIHelper.mapValueToPathItem(executorId))"
        let executorIdPostEscape = executorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{executorId}", with: executorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AbilityApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets ids of patient (persons), which had at least one service performed to by specified executor within specified dates.
     
     - parameter executorId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: [Int]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func executorsGetCustomers(executorId: Int, startDate: Date, endDate: Date) async throws -> [Int] {
        return try await executorsGetCustomersWithRequestBuilder(executorId: executorId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     Gets ids of patient (persons), which had at least one service performed to by specified executor within specified dates.
     - GET /api/executors/{executorId}/persons
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter executorId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<[Int]> 
     */
    open class func executorsGetCustomersWithRequestBuilder(executorId: Int, startDate: Date, endDate: Date) -> RequestBuilder<[Int]> {
        var localVariablePath = "/api/executors/{executorId}/persons"
        let executorIdPreEscape = "\(APIHelper.mapValueToPathItem(executorId))"
        let executorIdPostEscape = executorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{executorId}", with: executorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Int]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list of executors
     
     - parameter specialityId: (query) Optional speciality filter (optional)
     - parameter unitId: (query) Optional unit filter (optional)
     - parameter includeNonActive: (query) Include non active executors (optional, default to false)
     - returns: [ExecutorApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func executorsGetEmployees(specialityId: Int? = nil, unitId: Int? = nil, includeNonActive: Bool? = nil) async throws -> [ExecutorApiInfo] {
        return try await executorsGetEmployeesWithRequestBuilder(specialityId: specialityId, unitId: unitId, includeNonActive: includeNonActive).execute().body
    }

    /**
     Get list of executors
     - GET /api/executors
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter specialityId: (query) Optional speciality filter (optional)
     - parameter unitId: (query) Optional unit filter (optional)
     - parameter includeNonActive: (query) Include non active executors (optional, default to false)
     - returns: RequestBuilder<[ExecutorApiInfo]> 
     */
    open class func executorsGetEmployeesWithRequestBuilder(specialityId: Int? = nil, unitId: Int? = nil, includeNonActive: Bool? = nil) -> RequestBuilder<[ExecutorApiInfo]> {
        let localVariablePath = "/api/executors"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "specialityId": (wrappedValue: specialityId?.encodeToJSON(), isExplode: true),
            "unitId": (wrappedValue: unitId?.encodeToJSON(), isExplode: true),
            "includeNonActive": (wrappedValue: includeNonActive?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExecutorApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets employee timeslots for the specified dates, grouped by unit
     
     - parameter employeeId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter unitId: (query)  (optional)
     - returns: [ExecutorUnitTimeslots]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func resourceTimeslotGetTimeSlots(employeeId: Int, startDate: Date, endDate: Date, unitId: Int? = nil) async throws -> [ExecutorUnitTimeslots] {
        return try await resourceTimeslotGetTimeSlotsWithRequestBuilder(employeeId: employeeId, startDate: startDate, endDate: endDate, unitId: unitId).execute().body
    }

    /**
     Gets employee timeslots for the specified dates, grouped by unit
     - GET /api/employees/{employeeId}/timeslots
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter employeeId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter unitId: (query)  (optional)
     - returns: RequestBuilder<[ExecutorUnitTimeslots]> 
     */
    open class func resourceTimeslotGetTimeSlotsWithRequestBuilder(employeeId: Int, startDate: Date, endDate: Date, unitId: Int? = nil) -> RequestBuilder<[ExecutorUnitTimeslots]> {
        var localVariablePath = "/api/employees/{employeeId}/timeslots"
        let employeeIdPreEscape = "\(APIHelper.mapValueToPathItem(employeeId))"
        let employeeIdPostEscape = employeeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{employeeId}", with: employeeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "unitId": (wrappedValue: unitId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExecutorUnitTimeslots]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list of units - clinic and blood drawing points. Units are used when planning and creating orders.
     
     - returns: [UnitApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func unitsGet() async throws -> [UnitApiInfo] {
        return try await unitsGetWithRequestBuilder().execute().body
    }

    /**
     Get list of units - clinic and blood drawing points. Units are used when planning and creating orders.
     - GET /api/units
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - returns: RequestBuilder<[UnitApiInfo]> 
     */
    open class func unitsGetWithRequestBuilder() -> RequestBuilder<[UnitApiInfo]> {
        let localVariablePath = "/api/units"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UnitApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
