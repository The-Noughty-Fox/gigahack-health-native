//
// DocumentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DocumentsAPI {

    /**
     Attach file to patient's medical card
     
     - parameter personId: (path)  
     - parameter personDocumentApiAttach: (body) contentType: PdfDocument | Jpeg | Png | Gif | HtmlDocument | DicomFile  documentType: TitlePage | Consultation | Diary | ExaminationReport | LaboratoryResult | InterventionRecord | PrescriptionSheet | Epicrisis | Certificate | Referral | Consent | Contract | Financial | OtherNonMedical | OtherMedical 
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsAttachDocument(personId: Int, personDocumentApiAttach: PersonDocumentApiAttach) async throws -> URL {
        return try await documentsAttachDocumentWithRequestBuilder(personId: personId, personDocumentApiAttach: personDocumentApiAttach).execute().body
    }

    /**
     Attach file to patient's medical card
     - POST /api/persons/{personId}/documents
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter personDocumentApiAttach: (body) contentType: PdfDocument | Jpeg | Png | Gif | HtmlDocument | DicomFile  documentType: TitlePage | Consultation | Diary | ExaminationReport | LaboratoryResult | InterventionRecord | PrescriptionSheet | Epicrisis | Certificate | Referral | Consent | Contract | Financial | OtherNonMedical | OtherMedical 
     - returns: RequestBuilder<URL> 
     */
    open class func documentsAttachDocumentWithRequestBuilder(personId: Int, personDocumentApiAttach: PersonDocumentApiAttach) -> RequestBuilder<URL> {
        var localVariablePath = "/api/persons/{personId}/documents"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personDocumentApiAttach)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Download attachment
     
     - parameter documentId: (path)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsDownloadAttachment(documentId: Int) async throws -> URL {
        return try await documentsDownloadAttachmentWithRequestBuilder(documentId: documentId).execute().body
    }

    /**
     Download attachment
     - GET /api/documents/{documentId}/download
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter documentId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func documentsDownloadAttachmentWithRequestBuilder(documentId: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/documents/{documentId}/download"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Download document from online access code
     
     - parameter onlineAccessCode: (path)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsDownloadDocumentFromAccessCode(onlineAccessCode: String) async throws -> URL {
        return try await documentsDownloadDocumentFromAccessCodeWithRequestBuilder(onlineAccessCode: onlineAccessCode).execute().body
    }

    /**
     Download document from online access code
     - GET /api/documents/onlineaccesscode/{onlineAccessCode}/download
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter onlineAccessCode: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func documentsDownloadDocumentFromAccessCodeWithRequestBuilder(onlineAccessCode: String) -> RequestBuilder<URL> {
        var localVariablePath = "/api/documents/onlineaccesscode/{onlineAccessCode}/download"
        let onlineAccessCodePreEscape = "\(APIHelper.mapValueToPathItem(onlineAccessCode))"
        let onlineAccessCodePostEscape = onlineAccessCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{onlineAccessCode}", with: onlineAccessCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter documentId: (path)  
     - returns: [DocumentRecordApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsGetDocumentRecords(documentId: Int) async throws -> [DocumentRecordApiInfo] {
        return try await documentsGetDocumentRecordsWithRequestBuilder(documentId: documentId).execute().body
    }

    /**
     - GET /api/documents/{documentId}/records
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter documentId: (path)  
     - returns: RequestBuilder<[DocumentRecordApiInfo]> 
     */
    open class func documentsGetDocumentRecordsWithRequestBuilder(documentId: Int) -> RequestBuilder<[DocumentRecordApiInfo]> {
        var localVariablePath = "/api/documents/{documentId}/records"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DocumentRecordApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get document as HL7 v2 message
     
     - parameter documentId: (path)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsGetHl7(documentId: Int) async throws -> URL {
        return try await documentsGetHl7WithRequestBuilder(documentId: documentId).execute().body
    }

    /**
     Get document as HL7 v2 message
     - GET /api/documents/{documentId}/hl7
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter documentId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func documentsGetHl7WithRequestBuilder(documentId: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/documents/{documentId}/hl7"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List documents for a person. Documents must be finalized (protected) to appear here.
     
     - parameter personId: (path)  
     - parameter startDate: (query) Date filter (optional)
     - parameter endDate: (query) Date filter (optional)
     - returns: [DocumentApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsGetPersonDocuments(personId: Int, startDate: Date? = nil, endDate: Date? = nil) async throws -> [DocumentApiInfo] {
        return try await documentsGetPersonDocumentsWithRequestBuilder(personId: personId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     List documents for a person. Documents must be finalized (protected) to appear here.
     - GET /api/persons/{personId}/documents
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter startDate: (query) Date filter (optional)
     - parameter endDate: (query) Date filter (optional)
     - returns: RequestBuilder<[DocumentApiInfo]> 
     */
    open class func documentsGetPersonDocumentsWithRequestBuilder(personId: Int, startDate: Date? = nil, endDate: Date? = nil) -> RequestBuilder<[DocumentApiInfo]> {
        var localVariablePath = "/api/persons/{personId}/documents"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DocumentApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Render document as PDF
     
     - parameter documentId: (path)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func documentsRenderPdf(documentId: Int) async throws -> URL {
        return try await documentsRenderPdfWithRequestBuilder(documentId: documentId).execute().body
    }

    /**
     Render document as PDF
     - GET /api/documents/{documentId}/render
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter documentId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func documentsRenderPdfWithRequestBuilder(documentId: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/documents/{documentId}/render"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
