//
// RoutinesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RoutinesAPI {

    /**
     Get details for routine
     
     - parameter routineId: (path)  
     - returns: RoutineApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func routinesGetRoutine(routineId: Int) async throws -> RoutineApiInfo {
        return try await routinesGetRoutineWithRequestBuilder(routineId: routineId).execute().body
    }

    /**
     Get details for routine
     - GET /api/routines/{routineId}
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter routineId: (path)  
     - returns: RequestBuilder<RoutineApiInfo> 
     */
    open class func routinesGetRoutineWithRequestBuilder(routineId: Int) -> RequestBuilder<RoutineApiInfo> {
        var localVariablePath = "/api/routines/{routineId}"
        let routineIdPreEscape = "\(APIHelper.mapValueToPathItem(routineId))"
        let routineIdPostEscape = routineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{routineId}", with: routineIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RoutineApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get routine groups
     
     - returns: [RoutineGroupApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func routinesGetRoutineGroups() async throws -> [RoutineGroupApiInfo] {
        return try await routinesGetRoutineGroupsWithRequestBuilder().execute().body
    }

    /**
     Get routine groups
     - GET /api/routineGroups
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - returns: RequestBuilder<[RoutineGroupApiInfo]> 
     */
    open class func routinesGetRoutineGroupsWithRequestBuilder() -> RequestBuilder<[RoutineGroupApiInfo]> {
        let localVariablePath = "/api/routineGroups"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RoutineGroupApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search routines. If search is not specified, all routines are returned
     
     - parameter search: (query) Part of name, group name, keyword, or code (exact match) (optional)
     - parameter includeDeactivated: (query) Include inactive routines into search result (optional)
     - returns: [RoutineApiSearchResult]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func routinesSearchRoutines(search: String? = nil, includeDeactivated: Bool? = nil) async throws -> [RoutineApiSearchResult] {
        return try await routinesSearchRoutinesWithRequestBuilder(search: search, includeDeactivated: includeDeactivated).execute().body
    }

    /**
     Search routines. If search is not specified, all routines are returned
     - GET /api/routines
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter search: (query) Part of name, group name, keyword, or code (exact match) (optional)
     - parameter includeDeactivated: (query) Include inactive routines into search result (optional)
     - returns: RequestBuilder<[RoutineApiSearchResult]> 
     */
    open class func routinesSearchRoutinesWithRequestBuilder(search: String? = nil, includeDeactivated: Bool? = nil) -> RequestBuilder<[RoutineApiSearchResult]> {
        let localVariablePath = "/api/routines"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "includeDeactivated": (wrappedValue: includeDeactivated?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RoutineApiSearchResult]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
