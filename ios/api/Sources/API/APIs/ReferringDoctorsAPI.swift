//
// ReferringDoctorsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReferringDoctorsAPI {

    /**
     Create practitioner (referring doctor). Id of existing person should be provided. Id of practitioner resource is equal to person.id
     
     - parameter createPractitionerApiRequest: (body)  
     - returns: EntityIdApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func practitionerCreatePractitioner(createPractitionerApiRequest: CreatePractitionerApiRequest) async throws -> EntityIdApiInfo {
        return try await practitionerCreatePractitionerWithRequestBuilder(createPractitionerApiRequest: createPractitionerApiRequest).execute().body
    }

    /**
     Create practitioner (referring doctor). Id of existing person should be provided. Id of practitioner resource is equal to person.id
     - POST /api/practitioners
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter createPractitionerApiRequest: (body)  
     - returns: RequestBuilder<EntityIdApiInfo> 
     */
    open class func practitionerCreatePractitionerWithRequestBuilder(createPractitionerApiRequest: CreatePractitionerApiRequest) -> RequestBuilder<EntityIdApiInfo> {
        let localVariablePath = "/api/practitioners"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPractitionerApiRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EntityIdApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets practitioner commissions for the period
     
     - parameter practitionerId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: [CommissionInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func practitionerGetCommissions(practitionerId: Int, startDate: Date, endDate: Date) async throws -> [CommissionInfo] {
        return try await practitionerGetCommissionsWithRequestBuilder(practitionerId: practitionerId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     Gets practitioner commissions for the period
     - GET /api/practitioners/{practitionerId}/commissions
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter practitionerId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<[CommissionInfo]> 
     */
    open class func practitionerGetCommissionsWithRequestBuilder(practitionerId: Int, startDate: Date, endDate: Date) -> RequestBuilder<[CommissionInfo]> {
        var localVariablePath = "/api/practitioners/{practitionerId}/commissions"
        let practitionerIdPreEscape = "\(APIHelper.mapValueToPathItem(practitionerId))"
        let practitionerIdPostEscape = practitionerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{practitionerId}", with: practitionerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CommissionInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets ids of patient (persons), which had at least one service referred to by specified practitioner within specified dates.
     
     - parameter practitionerId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: [Int]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func practitionerGetCustomers(practitionerId: Int, startDate: Date, endDate: Date) async throws -> [Int] {
        return try await practitionerGetCustomersWithRequestBuilder(practitionerId: practitionerId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     Gets ids of patient (persons), which had at least one service referred to by specified practitioner within specified dates.
     - GET /api/practitioners/{practitionerId}/persons
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter practitionerId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<[Int]> 
     */
    open class func practitionerGetCustomersWithRequestBuilder(practitionerId: Int, startDate: Date, endDate: Date) -> RequestBuilder<[Int]> {
        var localVariablePath = "/api/practitioners/{practitionerId}/persons"
        let practitionerIdPreEscape = "\(APIHelper.mapValueToPathItem(practitionerId))"
        let practitionerIdPostEscape = practitionerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{practitionerId}", with: practitionerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Int]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get referring doctors
     
     - parameter code: (query) Code (optional)
     - parameter page: (query) Page (optional, default to 1)
     - parameter pageSize: (query) Page size (max 200) (optional, default to 50)
     - returns: [PractitionerApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func practitionerGetPractitioners(code: String? = nil, page: Int? = nil, pageSize: Int? = nil) async throws -> [PractitionerApiInfo] {
        return try await practitionerGetPractitionersWithRequestBuilder(code: code, page: page, pageSize: pageSize).execute().body
    }

    /**
     Get referring doctors
     - GET /api/practitioners
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter code: (query) Code (optional)
     - parameter page: (query) Page (optional, default to 1)
     - parameter pageSize: (query) Page size (max 200) (optional, default to 50)
     - returns: RequestBuilder<[PractitionerApiInfo]> 
     */
    open class func practitionerGetPractitionersWithRequestBuilder(code: String? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<[PractitionerApiInfo]> {
        let localVariablePath = "/api/practitioners"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": (wrappedValue: code?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PractitionerApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
