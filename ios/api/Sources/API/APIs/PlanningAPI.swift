//
// PlanningAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PlanningAPI {

    /**
     Get multiple planning appointment data
     
     - parameter getMultiPlanningAppointmentDataRequest: (body)  
     - returns: [AppointmentPlanningDataApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func planningApiGetMultiPlanningAppointmentData(getMultiPlanningAppointmentDataRequest: GetMultiPlanningAppointmentDataRequest) async throws -> [AppointmentPlanningDataApiInfo] {
        return try await planningApiGetMultiPlanningAppointmentDataWithRequestBuilder(getMultiPlanningAppointmentDataRequest: getMultiPlanningAppointmentDataRequest).execute().body
    }

    /**
     Get multiple planning appointment data
     - POST /api/planning/multi
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter getMultiPlanningAppointmentDataRequest: (body)  
     - returns: RequestBuilder<[AppointmentPlanningDataApiInfo]> 
     */
    open class func planningApiGetMultiPlanningAppointmentDataWithRequestBuilder(getMultiPlanningAppointmentDataRequest: GetMultiPlanningAppointmentDataRequest) -> RequestBuilder<[AppointmentPlanningDataApiInfo]> {
        let localVariablePath = "/api/planning/multi"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMultiPlanningAppointmentDataRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppointmentPlanningDataApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get available intervals according to search parameters.
     
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter unitId: (query)  (optional)
     - parameter executorId: (query)  (optional)
     - parameter specialityId: (query)  (optional)
     - parameter routineId: (query)  (optional)
     - returns: [PlanningResultApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func planningApiGetPlanning(startDate: Date, endDate: Date, unitId: Int? = nil, executorId: Int? = nil, specialityId: Int? = nil, routineId: Int? = nil) async throws -> [PlanningResultApiInfo] {
        return try await planningApiGetPlanningWithRequestBuilder(startDate: startDate, endDate: endDate, unitId: unitId, executorId: executorId, specialityId: specialityId, routineId: routineId).execute().body
    }

    /**
     Get available intervals according to search parameters.
     - GET /api/planning
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - parameter unitId: (query)  (optional)
     - parameter executorId: (query)  (optional)
     - parameter specialityId: (query)  (optional)
     - parameter routineId: (query)  (optional)
     - returns: RequestBuilder<[PlanningResultApiInfo]> 
     */
    open class func planningApiGetPlanningWithRequestBuilder(startDate: Date, endDate: Date, unitId: Int? = nil, executorId: Int? = nil, specialityId: Int? = nil, routineId: Int? = nil) -> RequestBuilder<[PlanningResultApiInfo]> {
        let localVariablePath = "/api/planning"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "unitId": (wrappedValue: unitId?.encodeToJSON(), isExplode: true),
            "executorId": (wrappedValue: executorId?.encodeToJSON(), isExplode: true),
            "specialityId": (wrappedValue: specialityId?.encodeToJSON(), isExplode: true),
            "routineId": (wrappedValue: routineId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PlanningResultApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
