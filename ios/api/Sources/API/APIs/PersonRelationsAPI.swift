//
// PersonRelationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PersonRelationsAPI {

    /**
     Create a new person relation
     
     - parameter personId: (path)  
     - parameter createPersonRelationApiRequest: (body)  
     - returns: EntityIdApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personRelationCreatePersonRelation(personId: Int, createPersonRelationApiRequest: CreatePersonRelationApiRequest) async throws -> EntityIdApiInfo {
        return try await personRelationCreatePersonRelationWithRequestBuilder(personId: personId, createPersonRelationApiRequest: createPersonRelationApiRequest).execute().body
    }

    /**
     Create a new person relation
     - POST /api/persons/{personId}/relations
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter createPersonRelationApiRequest: (body)  
     - returns: RequestBuilder<EntityIdApiInfo> 
     */
    open class func personRelationCreatePersonRelationWithRequestBuilder(personId: Int, createPersonRelationApiRequest: CreatePersonRelationApiRequest) -> RequestBuilder<EntityIdApiInfo> {
        var localVariablePath = "/api/persons/{personId}/relations"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPersonRelationApiRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EntityIdApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get person relations
     
     - parameter personId: (path)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personRelationGetPersonRelations(personId: Int) async throws -> URL {
        return try await personRelationGetPersonRelationsWithRequestBuilder(personId: personId).execute().body
    }

    /**
     Get person relations
     - GET /api/persons/{personId}/relations
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func personRelationGetPersonRelationsWithRequestBuilder(personId: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/persons/{personId}/relations"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
