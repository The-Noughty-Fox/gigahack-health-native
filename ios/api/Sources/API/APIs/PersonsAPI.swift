//
// PersonsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PersonsAPI {

    /**

     - parameter personId: (path)  
     - parameter personIdDocumentApiCreate: (body)  
     - returns: EntityIdApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personIdDocumentsCreatePersonIdDocument(personId: Int, personIdDocumentApiCreate: PersonIdDocumentApiCreate) async throws -> EntityIdApiInfo {
        return try await personIdDocumentsCreatePersonIdDocumentWithRequestBuilder(personId: personId, personIdDocumentApiCreate: personIdDocumentApiCreate).execute().body
    }

    /**
     - POST /api/persons/{personId}/idDocuments
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter personIdDocumentApiCreate: (body)  
     - returns: RequestBuilder<EntityIdApiInfo> 
     */
    open class func personIdDocumentsCreatePersonIdDocumentWithRequestBuilder(personId: Int, personIdDocumentApiCreate: PersonIdDocumentApiCreate) -> RequestBuilder<EntityIdApiInfo> {
        var localVariablePath = "/api/persons/{personId}/idDocuments"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personIdDocumentApiCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EntityIdApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create new person.
     
     - parameter personApiCreate: (body)  
     - returns: EntityIdApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsCreatePerson(personApiCreate: PersonApiCreate) async throws -> EntityIdApiInfo {
        return try await personsCreatePersonWithRequestBuilder(personApiCreate: personApiCreate).execute().body
    }

    /**
     Create new person.
     - POST /api/persons
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personApiCreate: (body)  
     - returns: RequestBuilder<EntityIdApiInfo> 
     */
    open class func personsCreatePersonWithRequestBuilder(personApiCreate: PersonApiCreate) -> RequestBuilder<EntityIdApiInfo> {
        let localVariablePath = "/api/persons"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personApiCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EntityIdApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Register new personal data consent form for a person.
     
     - parameter personId: (path)  
     - returns: EntityIdApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsCreatePersonalDataConsentForm(personId: Int) async throws -> EntityIdApiInfo {
        return try await personsCreatePersonalDataConsentFormWithRequestBuilder(personId: personId).execute().body
    }

    /**
     Register new personal data consent form for a person.
     - POST /api/persons/{personId}/personalDataConsentForms
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - returns: RequestBuilder<EntityIdApiInfo> 
     */
    open class func personsCreatePersonalDataConsentFormWithRequestBuilder(personId: Int) -> RequestBuilder<EntityIdApiInfo> {
        var localVariablePath = "/api/persons/{personId}/personalDataConsentForms"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EntityIdApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns details for a specific person.
     
     - parameter personId: (path)  
     - returns: PersonApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsGetPerson(personId: Int) async throws -> PersonApiInfo {
        return try await personsGetPersonWithRequestBuilder(personId: personId).execute().body
    }

    /**
     Returns details for a specific person.
     - GET /api/persons/{personId}
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - returns: RequestBuilder<PersonApiInfo> 
     */
    open class func personsGetPersonWithRequestBuilder(personId: Int) -> RequestBuilder<PersonApiInfo> {
        var localVariablePath = "/api/persons/{personId}"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersonApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets ids of practitioners, which had at least one service referred to by specified person within specified dates.
     
     - parameter personId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: [EntityApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsGetPersonPractitionersInfos(personId: Int, startDate: Date, endDate: Date) async throws -> [EntityApiInfo] {
        return try await personsGetPersonPractitionersInfosWithRequestBuilder(personId: personId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     Gets ids of practitioners, which had at least one service referred to by specified person within specified dates.
     - GET /api/persons/{personId}/practitioners
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<[EntityApiInfo]> 
     */
    open class func personsGetPersonPractitionersInfosWithRequestBuilder(personId: Int, startDate: Date, endDate: Date) -> RequestBuilder<[EntityApiInfo]> {
        var localVariablePath = "/api/persons/{personId}/practitioners"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EntityApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns payments (sales) for a person, used for CRM customer profiling.
     
     - parameter personId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: [PersonSettlementInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsGetPersonSettlementInfos(personId: Int, startDate: Date, endDate: Date) async throws -> [PersonSettlementInfo] {
        return try await personsGetPersonSettlementInfosWithRequestBuilder(personId: personId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     Returns payments (sales) for a person, used for CRM customer profiling.
     - GET /api/persons/{personId}/settlements
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<[PersonSettlementInfo]> 
     */
    open class func personsGetPersonSettlementInfosWithRequestBuilder(personId: Int, startDate: Date, endDate: Date) -> RequestBuilder<[PersonSettlementInfo]> {
        var localVariablePath = "/api/persons/{personId}/settlements"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PersonSettlementInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves the personal data consent forms for a specified person.
     
     - parameter personId: (path)  
     - returns: [PersonalDataConsentFormApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsGetPersonalDataConsentForms(personId: Int) async throws -> [PersonalDataConsentFormApiInfo] {
        return try await personsGetPersonalDataConsentFormsWithRequestBuilder(personId: personId).execute().body
    }

    /**
     Retrieves the personal data consent forms for a specified person.
     - GET /api/persons/{personId}/personalDataConsentForms
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - returns: RequestBuilder<[PersonalDataConsentFormApiInfo]> 
     */
    open class func personsGetPersonalDataConsentFormsWithRequestBuilder(personId: Int) -> RequestBuilder<[PersonalDataConsentFormApiInfo]> {
        var localVariablePath = "/api/persons/{personId}/personalDataConsentForms"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PersonalDataConsentFormApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     At least 1 parameter is required from the following: lastName, barcode, identificationNumber, channel
     
     - parameter lastName: (query)  (optional)
     - parameter firstName: (query)  (optional)
     - parameter patronymicName: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter barcode: (query)  (optional)
     - parameter identificationNumber: (query)  (optional)
     - parameter dateOfBirth: (query)  (optional)
     - returns: [PersonApiSearchResult]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsIndex(lastName: String? = nil, firstName: String? = nil, patronymicName: String? = nil, channel: String? = nil, barcode: String? = nil, identificationNumber: String? = nil, dateOfBirth: Date? = nil) async throws -> [PersonApiSearchResult] {
        return try await personsIndexWithRequestBuilder(lastName: lastName, firstName: firstName, patronymicName: patronymicName, channel: channel, barcode: barcode, identificationNumber: identificationNumber, dateOfBirth: dateOfBirth).execute().body
    }

    /**
     At least 1 parameter is required from the following: lastName, barcode, identificationNumber, channel
     - GET /api/persons
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter lastName: (query)  (optional)
     - parameter firstName: (query)  (optional)
     - parameter patronymicName: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter barcode: (query)  (optional)
     - parameter identificationNumber: (query)  (optional)
     - parameter dateOfBirth: (query)  (optional)
     - returns: RequestBuilder<[PersonApiSearchResult]> 
     */
    open class func personsIndexWithRequestBuilder(lastName: String? = nil, firstName: String? = nil, patronymicName: String? = nil, channel: String? = nil, barcode: String? = nil, identificationNumber: String? = nil, dateOfBirth: Date? = nil) -> RequestBuilder<[PersonApiSearchResult]> {
        let localVariablePath = "/api/persons"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "lastName": (wrappedValue: lastName?.encodeToJSON(), isExplode: true),
            "firstName": (wrappedValue: firstName?.encodeToJSON(), isExplode: true),
            "patronymicName": (wrappedValue: patronymicName?.encodeToJSON(), isExplode: true),
            "channel": (wrappedValue: channel?.encodeToJSON(), isExplode: true),
            "barcode": (wrappedValue: barcode?.encodeToJSON(), isExplode: true),
            "identificationNumber": (wrappedValue: identificationNumber?.encodeToJSON(), isExplode: true),
            "dateOfBirth": (wrappedValue: dateOfBirth?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PersonApiSearchResult]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates person. Handle with care! Employees can also be updated in this way.
     
     - parameter personId: (path)  
     - parameter personApiPatch: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personsPatchPerson(personId: Int, personApiPatch: PersonApiPatch) async throws -> URL {
        return try await personsPatchPersonWithRequestBuilder(personId: personId, personApiPatch: personApiPatch).execute().body
    }

    /**
     Updates person. Handle with care! Employees can also be updated in this way.
     - PATCH /api/persons/{personId}
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter personId: (path)  
     - parameter personApiPatch: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func personsPatchPersonWithRequestBuilder(personId: Int, personApiPatch: PersonApiPatch) -> RequestBuilder<URL> {
        var localVariablePath = "/api/persons/{personId}"
        let personIdPreEscape = "\(APIHelper.mapValueToPathItem(personId))"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personApiPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
