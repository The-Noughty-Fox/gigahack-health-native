//
// AppointmentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppointmentsAPI {

    /**
     Get appointment by id
     
     - parameter appointmentId: (path)  
     - returns: AppointmentOrderApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appointmentGetAppointmentInfo(appointmentId: Int) async throws -> AppointmentOrderApiInfo {
        return try await appointmentGetAppointmentInfoWithRequestBuilder(appointmentId: appointmentId).execute().body
    }

    /**
     Get appointment by id
     - GET /api/appointments/{appointmentId}
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter appointmentId: (path)  
     - returns: RequestBuilder<AppointmentOrderApiInfo> 
     */
    open class func appointmentGetAppointmentInfoWithRequestBuilder(appointmentId: Int) -> RequestBuilder<AppointmentOrderApiInfo> {
        var localVariablePath = "/api/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(APIHelper.mapValueToPathItem(appointmentId))"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppointmentOrderApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list of appointments. Either date range or patient Id is required
     
     - parameter startDate: (query) Date filter (optional)
     - parameter endDate: (query) Date filter (optional)
     - parameter patientId: (query) Patient filter (optional)
     - parameter executorId: (query) Executor filter (optional)
     - parameter referrerId: (query) Referrer filter (optional)
     - parameter unitId: (query) Unit filter (optional)
     - returns: [AppointmentApiInfo]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appointmentGetAppointments(startDate: Date? = nil, endDate: Date? = nil, patientId: Int? = nil, executorId: Int? = nil, referrerId: Int? = nil, unitId: Int? = nil) async throws -> [AppointmentApiInfo] {
        return try await appointmentGetAppointmentsWithRequestBuilder(startDate: startDate, endDate: endDate, patientId: patientId, executorId: executorId, referrerId: referrerId, unitId: unitId).execute().body
    }

    /**
     Get list of appointments. Either date range or patient Id is required
     - GET /api/appointments
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter startDate: (query) Date filter (optional)
     - parameter endDate: (query) Date filter (optional)
     - parameter patientId: (query) Patient filter (optional)
     - parameter executorId: (query) Executor filter (optional)
     - parameter referrerId: (query) Referrer filter (optional)
     - parameter unitId: (query) Unit filter (optional)
     - returns: RequestBuilder<[AppointmentApiInfo]> 
     */
    open class func appointmentGetAppointmentsWithRequestBuilder(startDate: Date? = nil, endDate: Date? = nil, patientId: Int? = nil, executorId: Int? = nil, referrerId: Int? = nil, unitId: Int? = nil) -> RequestBuilder<[AppointmentApiInfo]> {
        let localVariablePath = "/api/appointments"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "patientId": (wrappedValue: patientId?.encodeToJSON(), isExplode: true),
            "executorId": (wrappedValue: executorId?.encodeToJSON(), isExplode: true),
            "referrerId": (wrappedValue: referrerId?.encodeToJSON(), isExplode: true),
            "unitId": (wrappedValue: unitId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AppointmentApiInfo]>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update appointment by id
     
     - parameter appointmentId: (path)  
     - parameter appointmentApiPatch: (body)  
     - returns: URL
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appointmentPatchAppointment(appointmentId: Int, appointmentApiPatch: AppointmentApiPatch) async throws -> URL {
        return try await appointmentPatchAppointmentWithRequestBuilder(appointmentId: appointmentId, appointmentApiPatch: appointmentApiPatch).execute().body
    }

    /**
     Update appointment by id
     - PATCH /api/appointments/{appointmentId}
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter appointmentId: (path)  
     - parameter appointmentApiPatch: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func appointmentPatchAppointmentWithRequestBuilder(appointmentId: Int, appointmentApiPatch: AppointmentApiPatch) -> RequestBuilder<URL> {
        var localVariablePath = "/api/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(APIHelper.mapValueToPathItem(appointmentId))"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appointmentApiPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create appointment. Appointment is created in confirmed (Planned) state. Venue is automatic.
     
     - parameter appointmentPlanningRequest: (body)  
     - returns: AppointmentApiInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appointmentPlanAppointment(appointmentPlanningRequest: AppointmentPlanningRequest) async throws -> AppointmentApiInfo {
        return try await appointmentPlanAppointmentWithRequestBuilder(appointmentPlanningRequest: appointmentPlanningRequest).execute().body
    }

    /**
     Create appointment. Appointment is created in confirmed (Planned) state. Venue is automatic.
     - POST /api/appointments
     - API Key:
       - type: apiKey Api-Key (HEADER)
       - name: Api-Key
     - parameter appointmentPlanningRequest: (body)  
     - returns: RequestBuilder<AppointmentApiInfo> 
     */
    open class func appointmentPlanAppointmentWithRequestBuilder(appointmentPlanningRequest: AppointmentPlanningRequest) -> RequestBuilder<AppointmentApiInfo> {
        let localVariablePath = "/api/appointments"
        let localVariableURLString = APIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appointmentPlanningRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppointmentApiInfo>.Type = APIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
